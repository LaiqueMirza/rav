{"version":3,"sources":["components/SearchBar/SearchBar.js","components/Business/Business.js","components/BusinessList/BusinessList.js","util/Yelp.js","components/App/App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","state","term","location","sortBy","handleTermChange","bind","handleLocationChange","handleSearch","handleSortByChange","sortByOptions","sortByOption","this","setState","event","target","value","searchYelp","preventDefault","Object","keys","map","sortByOptionValue","className","getSortByClass","key","onClick","renderSortByOptions","placeholder","onChange","React","Component","Business","src","business","imageSrc","alt","name","address","city","zipCode","category","rating","reviewCount","BusinessList","businesses","id","Yelp","search","fetch","headers","Authorization","then","response","json","jsonResponse","image_url","address1","categories","title","review_count","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.42361c54.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      term: '',\r\n      location: '',\r\n      sortBy: 'best_match'\r\n    };\r\n\r\n    this.handleTermChange = this.handleTermChange.bind(this);\r\n    this.handleLocationChange = this.handleLocationChange.bind(this);\r\n    this.handleSearch = this.handleSearch.bind(this);\r\n    this.handleSortByChange = this.handleSortByChange.bind(this);\r\n\r\n    this.sortByOptions = {\r\n      'Best Match': 'best_match',\r\n      'Highest Rated': 'rating',\r\n      'Most Reviewed': 'review_count'\r\n    };\r\n  }\r\n\r\n  getSortByClass(sortByOption) {\r\n    if (this.state.sortBy === sortByOption) {\r\n      return 'active';\r\n    }\r\n    return '';\r\n  }\r\n\r\n  handleSortByChange(sortByOption) {\r\n    this.setState({sortBy: sortByOption});\r\n  }\r\n\r\n  handleTermChange(event) {\r\n    this.setState({term: event.target.value});\r\n  }\r\n\r\n  handleLocationChange(event) {\r\n    this.setState({location: event.target.value});\r\n  }\r\n\r\n  handleSearch(event) {\r\n    this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\r\n\r\n    event.preventDefault();\r\n  }\r\n\r\n  renderSortByOptions() {\r\n    return Object.keys(this.sortByOptions).map(sortByOption => {\r\n      let sortByOptionValue = this.sortByOptions[sortByOption];\r\n      return (<li className={this.getSortByClass(sortByOptionValue)}\r\n                  key={sortByOptionValue}\r\n                  onClick={this.handleSortByChange.bind(this, sortByOptionValue)}>\r\n                {sortByOption}\r\n             </li>);\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"SearchBar\">\r\n        <div className=\"SearchBar-sort-options\">\r\n          <ul>\r\n            {this.renderSortByOptions()}\r\n          </ul>\r\n        </div>\r\n        <div className=\"SearchBar-fields\">\r\n          <input placeholder=\"Search Businesses\" onChange={this.handleTermChange} />\r\n          <input placeholder=\"Where?\" onChange={this.handleLocationChange}/>\r\n        </div>\r\n        <div className=\"SearchBar-submit\">\r\n          <a onClick={this.handleSearch}>Let's Go</a>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\nimport './Business.css';\r\n\r\nclass Business extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Business\">\r\n  <div className=\"image-container\">\r\n    <img src={this.props.business.imageSrc} alt=''/>\r\n  </div>\r\n  <h2>{this.props.business.name}</h2>\r\n  <div className=\"Business-information\">\r\n    <div className=\"Business-address\">\r\n      <p>{this.props.business.address}</p>\r\n      <p>{this.props.business.city}</p>\r\n      <p>{this.props.business.state} {this.props.business.zipCode}</p>\r\n    </div>\r\n    <div className=\"Business-reviews\">\r\n      <h3>{this.props.business.category}</h3>\r\n      <h3 className=\"rating\">{this.props.business.rating} stars</h3>\r\n      <p>{this.props.business.reviewCount} reviews</p>\r\n    </div>\r\n  </div>\r\n</div>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default Business;","import React from 'react';\r\nimport './BusinessList.css';\r\nimport Business from '../Business/Business';\r\n\r\nclass BusinessList extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"BusinessList\">\r\n               {\r\n               this.props.businesses.map(business => {\r\n                   return <Business key={business.id} business={business} />\r\n               }) \r\n               }\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default BusinessList;","const apiKey = \"f8_JN3GnHD2xdCwbrNj0HeM6XnaAKgrts7CxnvnWyLCI1F_va8XAheZ5KbS_MR2kNjC62AV2BdFcPdW8DOcncjry_NLjaN_9ZotU72WzX5Wa_0Ygqcn-zB-iisQ8X3Yx\"\r\n\r\nconst Yelp = {\r\nsearch(term, location, sortBy) {\r\n    return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`, {\r\n\r\n    headers: {\r\n        Authorization: `Bearer ${apiKey}` \r\n      },   \r\n    }).then(response => {\r\n      return response.json();\r\n    }).then(jsonResponse => {\r\n      if (jsonResponse.businesses) {\r\n        return jsonResponse.businesses.map(business => ({\r\n                        id: business.id,\r\n                        imageSrc: business.image_url,\r\n                        name: business.name,\r\n                        address: business.location.address1,\r\n                        city: business.location.city,\r\n                        state: business.location.state,\r\n                        zipCode: business.location.zipCode,\r\n                        category: business.categories[0].title,\r\n                        rating: business.rating,\r\n                        reviewCount: business.review_count\r\n                              \r\n         }));\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\nexport default Yelp;\r\n","import React from 'react';\nimport './App.css';\nimport Searchbar from '../SearchBar/SearchBar';\nimport BusinessList from '../BusinessList/BusinessList';\nimport Yelp from '../../util/Yelp';\n\nclass App extends React.Component {\nconstructor(props){\n  super(props);\n  this.state = {\n    businesses: []\n};\n this.searchYelp = this.searchYelp.bind(this);\n}\n\n  searchYelp(term, location, sortBy) {\n  Yelp.search(term, location, sortBy).then(businesses => {\n    this.setState({ businesses: businesses });\n  });\n}\n\n  render() {\n  return (\n    <div className=\"App\">\n      <h1>ravenous</h1>\n      <Searchbar searchYelp={this.searchYelp} />\n      <BusinessList businesses={this.state.businesses}/> \n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}